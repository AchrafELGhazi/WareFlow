// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STAFF
  CLIENT
  SUPPLIER
  VENDOR
  ADMIN
}

model User {
  userId       String    @id @default(uuid()) @map("user_id")
  username     String    @unique
  passwordHash String    @map("password_hash")
  email        String?   @unique
  isActive     Boolean   @default(true) @map("is_active")
  lastLogin    DateTime? @map("last_login")
  role         UserRole  @default(CLIENT)
  staff        Staff?
  client       Client?
  supplier     Supplier?
  vendor       Vendor?
  profile      Profile?  @relation("user_profile")
  createdAt    DateTime  @default(now())

  @@map("users")
}

model Profile {
  profileId String   @id @default(uuid()) @map("profile_id")
  userId    String   @unique @map("user_id")
  user      User     @relation("user_profile", fields: [userId], references: [userId])
  firstName String?  @map("first_name")
  lastName  String?  @map("last_name")
  phone     String?
  bio       String?
  avatarUrl String?  @map("avatar_url")
  language  String   @default("en")
  timezone  String   @default("UTC")
  address   Address?
  companyId String?  @map("company_id")
  company   Company? @relation(fields: [companyId], references: [companyId])
  createdAt DateTime @default(now())

  @@map("profiles")
}

model Staff {
  staffId          String                 @id @default(uuid()) @map("staff_id")
  jobCode          String                 @map("job_code")
  job              Job                    @relation("staff_job", fields: [jobCode], references: [jobCode])
  firstName        String                 @map("first_name")
  lastName         String                 @map("last_name")
  hireDate         DateTime               @default(now()) @map("hire_date")
  userId           String                 @unique @map("user_id")
  user             User                   @relation(fields: [userId], references: [userId])
  warehouseManaged Warehouse?             @relation("warehouse_manager")
  createdAt        DateTime               @default(now())
  transactions     InventoryTransaction[]

  @@map("staff")
}

model Client {
  clientId      String        @id @default(uuid()) @map("client_id")
  userId        String        @unique @map("user_id")
  user          User          @relation(fields: [userId], references: [userId], onDelete: Cascade)
  creditLimit   Float?        @map("credit_limit")
  creditRating  String?       @map("credit_rating")
  accountStatus String        @default("active") @map("account_status")
  companyId     String?       @map("company_id")
  company       Company?      @relation(fields: [companyId], references: [companyId])
  products      Product[]
  clientOrders  ClientOrder[]
  createdAt     DateTime      @default(now()) @map("created_at")

  @@map("clients")
}

model Supplier {
  supplierId     String          @id @default(uuid()) @map("supplier_id")
  companyId      String          @map("company_id")
  company        Company         @relation(fields: [companyId], references: [companyId])
  userId         String          @unique @map("user_id")
  user           User            @relation(fields: [userId], references: [userId])
  vendors        Vendor[]
  supplierOrders SupplierOrder[]
  createdAt      DateTime        @default(now())

  @@map("suppliers")
}

model Vendor {
  vendorId       String          @id @default(uuid()) @map("vendor_id")
  userId         String          @unique @map("user_id")
  user           User            @relation(fields: [userId], references: [userId], onDelete: Cascade)
  supplierId     String?         @map("supplier_id")
  supplier       Supplier?       @relation(fields: [supplierId], references: [supplierId])
  position       String?
  clientOrders   ClientOrder[]
  supplierOrders SupplierOrder[]
  createdAt      DateTime        @default(now()) @map("created_at")

  @@map("vendors")
}

model Address {
  addressId     String   @id @default(uuid()) @map("address_id")
  profileId     String   @unique @map("profile_id")
  profile       Profile  @relation(fields: [profileId], references: [profileId])
  streetAddress String?  @map("street_address")
  city          String
  state         String?
  postalCode    String?  @map("postal_code")
  country       String

  @@map("addresses")
}

model Job {
  jobCode        String   @id @default(uuid()) @map("job_code")
  jobDescription String   @map("job_description")
  jobChargeHour  Int      @default(0) @map("job_charge_hour")
  staff          Staff[]  @relation("staff_job")

  @@map("jobs")
}

model Warehouse {
  warehouseId   String                 @id @default(uuid()) @map("warehouse_id")
  warehouseName String                 @map("warehouse_name")
  managerId     String?                @unique @map("manager_id")
  manager       Staff?                 @relation("warehouse_manager", fields: [managerId], references: [staffId])
  products      Product[]              @relation("products_in_warehouse")
  transactions  InventoryTransaction[]

  @@map("warehouses")
}

model Product {
  productId             String                 @id @default(uuid()) @map("product_id")
  productName           String                 @map("product_name")
  warehouseId           String                 @map("warehouse_id")
  warehouse             Warehouse              @relation("products_in_warehouse", fields: [warehouseId], references: [warehouseId])
  categoryId            String                 @map("category_id")
  category              Category               @relation("category_products", fields: [categoryId], references: [categoryId])
  clientId              String?                @map("client_id")
  client                Client?                @relation(fields: [clientId], references: [clientId])
  priceHistory          ProductPriceHistory[]
  clientOrderItems      ClientOrderItem[]
  supplierOrderItems    SupplierOrderItem[]
  inventoryTransactions InventoryTransaction[]

  @@map("products")
}

model Category {
  categoryId          String    @id @default(uuid()) @map("category_id")
  categoryName        String    @map("category_name")
  categoryDescription String?   @map("category_description")
  products            Product[] @relation("category_products")

  @@map("categories")
}

model Company {
  companyId          String     @id @default(uuid()) @map("company_id")
  companyName        String     @map("company_name")
  companyDescription String     @map("company_description")
  taxId              String?    @unique @map("tax_id")
  industry           String?
  website            String?
  foundedDate        DateTime?  @map("founded_date")
  managerName        String?    @map("manager_name")
  suppliers          Supplier[]
  profiles           Profile[]
  clients            Client[]

  @@map("companies")
}


model ClientOrder {
  clientOrderId String            @id @default(uuid()) @map("client_order_id")
  clientId      String            @map("client_id")
  client        Client            @relation(fields: [clientId], references: [clientId])
  vendorId      String?           @map("vendor_id")
  vendor        Vendor?           @relation(fields: [vendorId], references: [vendorId])
  status        String            @default("pending")
  orderDate     DateTime          @default(now()) @map("order_date")
  orderItems    ClientOrderItem[]
  createdAt     DateTime          @default(now())

  @@map("client_orders")
}

model ClientOrderItem {
  itemId        String      @id @default(uuid()) @map("item_id")
  clientOrderId String      @map("client_order_id")
  clientOrder   ClientOrder @relation(fields: [clientOrderId], references: [clientOrderId])
  productId     String      @map("product_id")
  product       Product     @relation(fields: [productId], references: [productId])
  quantity      Int
  createdAt     DateTime    @default(now())

  @@map("client_order_items")
}

model SupplierOrder {
  supplierOrderId String              @id @default(uuid()) @map("supplier_order_id")
  supplierId      String              @map("supplier_id")
  supplier        Supplier            @relation(fields: [supplierId], references: [supplierId])
  vendorId        String?             @map("vendor_id")
  vendor          Vendor?             @relation(fields: [vendorId], references: [vendorId])
  status          String              @default("pending")
  orderDate       DateTime            @default(now()) @map("order_date")
  orderItems      SupplierOrderItem[]
  createdAt       DateTime            @default(now())

  @@map("supplier_orders")
}

model SupplierOrderItem {
  itemId          String        @id @default(uuid()) @map("item_id")
  supplierOrderId String        @map("supplier_order_id")
  supplierOrder   SupplierOrder @relation(fields: [supplierOrderId], references: [supplierOrderId])
  productId       String        @map("product_id")
  product         Product       @relation(fields: [productId], references: [productId])
  quantity        Int
  createdAt       DateTime      @default(now())

  @@map("supplier_order_items")
}

model ProductPriceHistory {
  historyId     String   @id @default(uuid()) @map("history_id")
  productId     String   @map("product_id")
  product       Product  @relation(fields: [productId], references: [productId])
  price         Float
  effectiveDate DateTime @map("effective_date")
  createdAt     DateTime @default(now())

  @@map("product_price_history")
}

model InventoryTransaction {
  transactionId   String    @id @default(uuid()) @map("transaction_id")
  productId       String    @map("product_id")
  product         Product   @relation(fields: [productId], references: [productId])
  warehouseId     String    @map("warehouse_id")
  warehouse       Warehouse @relation(fields: [warehouseId], references: [warehouseId])
  staffId         String    @map("staff_id")
  staff           Staff     @relation(fields: [staffId], references: [staffId])
  transactionType String    @map("transaction_type") //this could be "receive", "ship", "adjust", "transfer"
  quantity        Int
  transactionDate DateTime  @default(now()) @map("transaction_date")
  createdAt       DateTime  @default(now())

  @@map("inventory_transactions")
}
























// these two models are here for documentation purposes
// and are not used in the actual database

// model User {
//   id             Int             @id @default(autoincrement()) // Integer, auto-incrementing primary key  !!!!! BETTER USE UUID !!!!!
//   email          String          @unique // String, must be unique (e.g., for login)
//   name           String? // Optional string (nullable name field)
//   isAdmin        Boolean         @default(false) // Boolean, defaults to false
//   largeNumber    BigInt // BigInt for very large integer values
//   rating         Float           @default(0) // Floating-point number, defaults to 0
//   createdAt      DateTime        @default(now()) // Timestamp for when the user was created
//   updatedAt      DateTime        @updatedAt // Timestamp that updates automatically on update
//   // preferences    Json? // Optional JSON field (can store settings, config, etc.)
//   writtenPosts   Post[]          @relation("WrittenPosts") // One-to-many relation: a user can have many posts
//   favoritedPosts Post[]          @relation("FavoritedPosts") // One-to-many relation: a user can have many favorite posts
//   blob           Bytes? // Optional binary data field (e.g., for images, files)
//   UserPreference UserPreference? // One-to-one relation: each user has one preference
// }

// model UserPreference {
//   id           String   @id @default(uuid()) // UUID, unique identifier for the preference
//   emailUpdates Boolean?
//   user         User     @relation(fields: [userId], references: [id])
//   userId       Int  @unique // Foreign key linking to User model
// }

// model Post {
//   id            String     @id @default(uuid()) // uuid, unique identifier for the post
//   title         String // Required string (title of the post)
//   content       String? // Optional string (the content of the post)
//   published     Boolean    @default(false) // Boolean, indicates if the post is published
//   author        User       @relation("WrittenPosts", fields: [authorId], references: [id]) // Many-to-one: each post belongs to one user
//   authorId      Int // Foreign key linking to User model
//   favoritedBy   User?      @relation("FavoritedPosts", fields: [favoritedById], references: [id]) // Many-to-one: each post can be favorited by one user
//   favoritedById Int? // Foreign key linking to User model
//   categories    Category[] // Many-to-many relation: a post can belong to many categories

//   createdAt DateTime @default(now()) // Timestamp for when the post was created
//   updatedAt DateTime @updatedAt // Timestamp that updates automatically on update
// }

// model Category {
//   id    String @id @default(uuid()) // Integer, auto-incrementing primary key
//   name  String @unique // String, must be unique (e.g., for category name)
//   posts Post[] // many-to-many relation: a category can have many posts
// }
